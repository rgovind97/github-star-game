{"version":3,"sources":["components/StarMatch.jsx","App.js","reportWebVitals.js","index.js"],"names":["StarsDisplay","props","utils","range","count","map","starId","className","PlayNumber","style","backgroundColor","colors","status","onClick","number","available","used","wrong","candidate","sum","arr","reduce","acc","curr","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","StarMatch","useState","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","candidatesAreWrong","numberStatus","includes","onNumberClick","currentStatus","newCandidateNums","filter","cn","newAvailableNums","n","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c36c58c5.chunk.js","sourcesContent":["// STAR MATCH - V5\nimport React, { useState } from \"react\";\n\nconst StarsDisplay = props => (\n    <>\n      {utils.range(1, props.count).map(starId => (\n        <div key={starId} className=\"star\" />\n      ))}\n    </>\n  );\n  \n  const PlayNumber = props => (\n    <button\n      className=\"number\"\n      style={{backgroundColor: colors[props.status]}}\n      onClick={() => props.onClick(props.number, props.status)}\n    >\n      {props.number}\n    </button>\n  );\n  \n  const StarMatch = () => {\n    const [stars, setStars] = useState(utils.random(1, 9));\n    const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\n    const [candidateNums, setCandidateNums] = useState([]);\n  \n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  \n    const numberStatus = number => {\n      if (!availableNums.includes(number)) {\n        return 'used';\n      }\n      if (candidateNums.includes(number)) {\n        return candidatesAreWrong ? 'wrong' : 'candidate';\n      }\n      return 'available';\n    };\n  \n    const onNumberClick = (number, currentStatus) => {\n      if (currentStatus === 'used') {\n        return;\n      }\n  \n          const newCandidateNums =\n        currentStatus === 'available'\n          ? candidateNums.concat(number)\n          : candidateNums.filter(cn => cn !== number);\n  \n      if (utils.sum(newCandidateNums) !== stars) {\n        setCandidateNums(newCandidateNums);\n      } else {\n        const newAvailableNums = availableNums.filter(\n          n => !newCandidateNums.includes(n)\n        );\n        setStars(utils.randomSumIn(newAvailableNums, 9));\n        setAvailableNums(newAvailableNums);\n        setCandidateNums([]);\n      }\n    };\n  \n    return (\n      <div className=\"game\">\n        <div className=\"help\">\n          Pick 1 or more numbers that sum to the number of stars\n        </div>\n        <div className=\"body\">\n          <div className=\"left\">\n            <StarsDisplay count={stars} />\n          </div>\n          <div className=\"right\">\n            {utils.range(1, 9).map(number => (\n              <PlayNumber\n                key={number}\n                status={numberStatus(number)}\n                number={number}\n                onClick={onNumberClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className=\"timer\">Time Remaining: 10</div>\n      </div>\n    );\n  };\n  \n  // Color Theme\n  const colors = {\n    available: 'lightgray',\n    used: 'lightgreen',\n    wrong: 'lightcoral',\n    candidate: 'deepskyblue',\n  };\n  \n  // Math science\n  const utils = {\n    // Sum an array\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n  \n    // create an array of numbers between min and max (edges included)\n    range: (min, max) => Array.from({length: max - min + 1}, (_, i) => min + i),\n  \n    // pick a random number between min and max (edges included)\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n  \n    // Given an array of numbers and a max...\n    // Pick a random sum (< max) from the set of all available sums in arr\n    randomSumIn: (arr, max) => {\n      const sets = [[]];\n      const sums = [];\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0, len = sets.length; j < len; j++) {\n          const candidateSet = sets[j].concat(arr[i]);\n          const candidateSum = utils.sum(candidateSet);\n          if (candidateSum <= max) {\n            sets.push(candidateSet);\n            sums.push(candidateSum);\n          }\n        }\n      }\n      return sums[utils.random(0, sums.length - 1)];\n    },\n  };\n\n  export default StarMatch;","\nimport './App.css';\nimport React from \"react\";\nimport StarMatch from './components/StarMatch.jsx'\n\n\n// ReactDOM.render(<StarMatch />, mountNode);\t\nfunction App() {\n  return (\n  <StarMatch />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}